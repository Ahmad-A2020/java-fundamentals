/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.Random;
import java.util.ArrayList;
import java.util.*;


public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
    public static void main(String[] args){
        System.out.println("hellow worlls");
        // test of the first method Rolling Dice:
        int dayNumber=3;
        int [] tray= roll(dayNumber);
        // print the item of tray
        System.out.println("the result of the "+dayNumber+" times rolling is: ");
        for (int item : tray){
            System.out.println(item);
        }
//        System.out.println(roll(3).length);
//        System.out.println(roll(3)[0]);

        // check the duplicate
        System.out.println("Duplicate function value :"+containsDuplicates(tray));

        // invoke average method
        System.out.println("the average of rolled Dice is: "+Averages(tray));

        // the Arrays of Arrays method test
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        System.out.println("the first item of the lowest average array is : "+lowestArrayAverage(weeklyMonthTemperatures)[0]);
        // lab 03 Maps methods

        Maps(weeklyMonthTemperatures);
        // lab 03-tally method:
        // within your main method...
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");


    }

    public static int [] roll(int n){
        Random randValue= new Random();
        int array [];
        array = new int[n];

        for (int i=0; i<n;i++){
            int rand= randValue.nextInt(6);
            array[i]=rand;
        }
        return array;

    }
    public static boolean containsDuplicates(int [] arr){
        boolean checker= false;
        for (int i=0; i<arr.length;i++){
            for (int j=i+1;j<arr.length;j++){
                if (arr[i] == arr[j]){
                    checker = true;
                }
            }
        }
        return checker;
    }

    public static float Averages(int [] arr){
        float sum= 0;
        for (int item: arr){
            sum += item;

        }
        return (sum/arr.length);
    }
    public static int [] lowestArrayAverage (int [][] arraysGroup){
        float oldAverage=0;
        int [] targetArray= new int[arraysGroup[0][0]];
        for (int [] array:arraysGroup ){
            float sum=0;
            for (int item: array){
                sum+= item;
            }
            float newAverage= sum/array.length;
            if (newAverage< oldAverage){
                targetArray= array;
            }
            oldAverage= newAverage;
        }
        return targetArray;

    }
    public static void Maps ( int [] [] tempArray){
        Set<Integer> uniqueTempreature = new HashSet<>();
        for (int [] array:tempArray ){
            for (int item: array){
                uniqueTempreature.add(item);
            }

        }
        int min= Collections.min(uniqueTempreature);
        int max= Collections.max(uniqueTempreature);
        System.out.println("High: "+max);
        System.out.println("Low: "+min);
        for (int i=min; i<max; i++){
            if ( !uniqueTempreature.contains(i)){
                System.out.println("Never saw temperature: "+i);
            }
        }
    }
    public static String tally ( List<String>  votesArray){
        int bushVotes=0;
        int ShrubVotes=0;
        for (String item: votesArray){
            if (item == "Bush"){
                bushVotes +=1;
            }else{
                ShrubVotes+=1;
            }
        }
        if (bushVotes>ShrubVotes){
            return "Bush";
        } else{
            return  "Shrub";
        }
    }
}
